1) 	i = row*8 +  col;		// could have done row<<4 + col but kept it simple

2) 	col = i % 8;			// modulus operator to get remainder

3) 	row = (i - (i % 8))/8;	// ignore the remainder and divide

4) 	Bits 4-7 = 0x6 = 0110, so bit at position 6 is 1.

5)	row = 4, col = 2, i = 4*8 + 2 = 34
	Bits 32-35 is the 9th hex number from the left, 0x1 = 0001
	so bit at position of (4,2) is 0. 

6)	Test patterns for countNeighbours method:
	world					col 	row		result
	----------------------------------------------
	0x20A0600000000000L		6		6		5
	..						7		7		1
	..						3 		3 		0
	..						4 		4 		1
	..						4		7		2
	Ox20272000027202L		2		2		2
	..						5		1		2
	..						5		6		1
	..						2		5		1
	..						2		4		2	
	---------------------------------------------

7)	Results for countNeighbours method:
	dcm41@snap:~/java$ java uk.ac.cam.dcm41.tick2.TinyLife
	5
	1	
	0
	1
	2
	2
	2
	1
	1
	2

8) 	Test patterns for getCell method:
	world					col 	row		result
	----------------------------------------------
	0x20A0600000000000L		6		6		false
	..						7		7		false
	..						3 		3 		false
	..						4 		4 		false
	..						4		7		fasle
	Ox20272000027202L		2		2		false
	..						5		1		true
	..						5		6		false
	..						2		5		false
	..						2		4		false	
	---------------------------------------------

9)	Results for computeCell method:
	false
	false
	false
	false
	false
	false
	true
	false
	false
	false

